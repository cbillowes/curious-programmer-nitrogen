[{"slug":"/blog/how-i-got-started-with-my-first-gatsby-source-remark-plugin","title":"How I got started with my first Gatsby source & remark plugin","tags":["Technical","Gatsby"],"html":"I created my first npm package ðŸŽ‰ It's a Gatsby source and transformer remark plugin called gatsby-remark-interactive-gifs. What that means is that it both extends the Gatsby GraphQL schema with what I call interactive gif data and it translates the Markdown, which I have in the form of a gif protocol, into HTML. That means that this `gif:nyancat.gif:caption=Nyanyanyanyanyanyanya` becomes ðŸ‘‡Nyanyanyanyanyanyanya  If you like the idea of this plugin then please give it a star on GitHub. Try it out by installing it now ðŸ˜„ npm i -S gatsby-remark-interactive-gifs  Getting started  If you are unfamiliar with Gatsby, Gatsby is a blazing fast modern site generator for React. To dive right in, check out the Gatsby quick start guide.   Create a Gatsby project (or use your existing one). Use the default or go fancy with a Gatsby starter for a fresh copy. I used gatsby-started-default for my blog.  gatsby new my-default-starter https://github.com/gatsbyjs/gatsby-starter-default  Create a plugins directory in the root of your project with a directory of the plugin you want to create. eg. plugins/gatsby-remark-interactive-gifs There is a specific naming convention for plugins that you should take note of. Initialize the directory with git before getting started. git init Each plugin needs to have a package.json file so initialize your plugin with npm init. Add the --yes / -y flag if you wish to skip the questionnaire. Be sure to configure your package.json file with the relevant details if you intend on publishing to npm. Include relevant keywords so that your plugin is detected by Gatsby's search mechanisms. Create a src directory where you will place all the files you want to create for your plugin. Read through the plugin documentation to get an idea of what you can create. There are some files that Gatsby looks for in a plugin. Find a place to put your tests. I put mine in a specs directory in the root of the plugin. Install the packages you need for your plugin using npm or yarn and configure them accordingly. Commit your lock files. You can create a release script that will bump the version, update the CHANGELOG.md and tag that commit for your release. I use standard-version to automate that process. To publish your plugin, login to npm through the CLI.  npm run release #if you have a release script git push -u origin --tags npm publish"}]